{
	"blogs": [
		{
			"title": "Meet the React Component",
			"preview": "What is a component and what do we mean when we say that React is a component-based library?",
			"body": "Every React application is built on the foundation of React components. In this section, you will get to know your first React component which is located in the src/App.js file and which should look similar to the example below.\nDepending on your create-react-app version, the content of the file might differ slightly.\nThis file will be our focus throughout this tutorial, unless otherwise specified. Let's start by reducing the component to a more lightweight version for getting you started without too much boilerplate code³¹. Afterward, start your application with npm start in the command line and check what's displayed in the browser...",
			"author": "Rob Wieruch",
			"id": "1"
		},
		{
			"title": "React JSX",
			"preview": "Kim is always the go-to person for beginners and we are proud to have him here to start you off with React JSX.",
			"body": "Everything returned from a React component will be displayed in the browser. Until now, we only returned HTML from the App component. However, recall that I mentioned the returned output of the App component not only resembles HTML, but it can also be mixed with JavaScript. In fact, this output is called JSX (JavaScript XML), powerfully combines HTML and JavaScript. Let's see how this works for displaying the variable from the previous section. Either start your application again with npm start (or check whether your application still runs) and look for the rendered variable in the browser, which should read: “Hello React”. If you change the variable in the source code, the browser should reflect that change. Now let's focus on the HTML which differs slightly in JSX. An HTML input field with a label can be defined as follows...",
			"author": "Kimathi Njoki",
			"id": "2"
		},
		{
			"title": "Lists in React",
			"preview": "React can be a den of lions. And who better to take you through than Daniel himself? (See what we did there? Daniel... den... lions?)",
			"body": "So far we've rendered a few variables in JSX, however, most often you will deal with arrays. Thus we'll render a list of  items next. We'll experiment with sample data first, and later we'll apply that knowledge to fetched data from a remote API. First, let's define the array as a variable. Similar as before, we can define a variable outside or inside the component. The following defines it outside. \n\nNote: I used a ... here as a placeholder, to keep my code snippet small (without the App component's implementation details) and focused on the essential parts (the list variable outside of the App component). I will use the ... throughout the rest of this learning experience as a placeholder for code blocks that I have established in previous sections. If you get lost, you can always verify your code using the CodeSandbox links I provide at the end of most sections. Each item in the list has a title, a url, an author, an identifier (objectID), points – which indicate the popularity of an item – and a count of comments (num_comments). Next, we'll render the list within our JSX dynamically...",
			"author": "Prince Daniel",
			"id": "3"
		},
		{
			"title": "Handler Function in JSX",
			"preview": "No better person to handle this (no pun intended) than Ogada. Read along.",
			"body": "The Search component still has the input field and label, which we haven't used. In HTML outside of JSX, input fields have an onchange handler⁶⁴. We're going to discover how to use onchange handlers with a React component's JSX. First, refactor the Search component from a concise body to a block body so we can add implementation details. \nReact's synthetic event is essentially a wrapper around the browser's native event⁶⁵, with more functions that are useful to prevent native browser behavior (e.g. refreshing a page after the user clicks a form's submit button). Sometimes you will use the event, sometimes you won't need it. After all, this is how we give HTML elements in JSX handler functions to respond to user interaction. Always pass functions to these handlers, not the return value of the function, except when the return value is a function. Knowing this is crucial because it’s a well-known source for bugs in a React beginners application...",
			"author": "Ogada Ogada",
			"id": "4"
		},
		{
			"title": "Inline Handler in JSX",
			"preview": "Nyokabi is a React Dojo and will take us through Inline handling in JSX",
			"body": "The list of stories we have in our App component is only an unstateful variable. We can filter the rendered list with the search feature, but the list itself stays intact even if we apply or remove the filter. The filtered list is just a derived state through a third party (here searchTerm), but we can’t manipulate the real list yet. To gain control over the list, make it stateful by using it as initial state in React’s useState Hook. The returned values from the array are the current state (stories) and the state updater function (setStories).\nThe callback handler in the App component – which will be used in the List/Item components eventually – receives the item as an argument which should be removed from the list. Based on this information, the function filters the current stories by removing all items that don’t meet its condition. The returned stories – where the desired item (story) has been removed – are then set as a new state and passed to the List component. Since a new state is set, the App component and all components below (e.g. List/Item components) will render again and thus display the new state of stories. However, what’s missing is how the List and Item components are using this new functionality which modifies the state in the App component. The List component itself does not use this new callback handler, but only passes it on to the Item component...",
			"author": "Nyokabi Kamau",
			"id": "5"
		},
		{
			"title": "Data Fetching with React",
			"preview": "Let us fetch data in React with Ian",
			"body": "We are currently fetching data, but it’s still pseudo data coming from a promise we set up ourselves. The lessons up to now about asynchronous React and advanced state management were preparing us to fetch data from a real remote third-party API. We will use the reliable and informative Hacker News API¹⁶⁰ to request popular tech stories. Instead of using the initialStories array and getAsyncStories function (you can remove these), we will fetch the data directly from the API.\nFirst, the API_ENDPOINT (A) is used to fetch popular tech stories for a certain query (a search term). In this case, we fetch stories about React (B). Second, the native browser’s fetch API¹⁶¹ is used to make this request (B). For the fetch API, the response needs to be translated into JSON (C). Finally, the returned result follows a different data structure (D), which we send as payload to our component’s state reducer.\nCheck your browser to see stories related to the initial query fetched from the Hacker News API. Since we used the same data structure for a story for the sample stories, we didn’t need to change anything, and it’s still possible to filter the stories after fetching them with the search feature. We will change this behavior in one of the next sections though...",
			"author": "Chemweno Ian",
			"id": "6"
		},
		{
			"title": "Data Re-Fetching with React",
			"preview": "You have fetched data. What if youeant to do it again?",
			"body": "So far, the App component fetches a list of stories once with a predefined query (react). After that, users can search for stories on the client-side. Now we’ll move this feature from client-side to serverside  searching, using the actual searchTerm as a dynamic query for the API request. First, remove searchedStories because we will receive the stories searched from the API. Pass only the regular stories to the List component.\nWe changed the feature from a client-side to server-side search. Instead of filtering a predefined list of stories on the client, the searchTerm is used to fetch a server-side filtered list. The server-side search happens not only for the initial data fetching, but also for data fetching if the searchTerm changes. The feature is fully server-side now. Re-fetching data each time someone types into the input field isn’t optimal though, so we’ll correct that soon. Because this implementation stresses the API, you might experience errors if you use requests too often...",
			"author": "Bob Oyier",
			"id": "7"
		},
		{
			"title": "Memoized Handler in React (Advanced)",
			"preview": "Not memorization. Memoization. What is is and why is it so important in React?",
			"body": "The previous sections have taught you about handlers, callback handlers, and inline handlers. Now we’ll introduce a memoized handler, which can be applied on top of handlers and callback handlers. For the sake of learning, we will move all the data fetching logic into a standalone function outside the side-effect (A); wrap it into a useCallback hook (B), and then invoke it in the useEffect hook (C).\nThe application behaves the same, only the implementation logic has been refactored. Instead of using the data fetching logic anonymously in a side-effect, we made it available as a function for the application. Let’s explore why React’s useCallback Hook is needed here.\nIf we didn’t create a memoized function with React’s useCallback Hook, a new handleFetchStories function would be created each time the App component re-renders, and would be executed in the useEffect hook to fetch data. The fetched data is then stored as state in the component. Because the state of the component changed, the component re-renders and creates a new handleFetchStories function. The side-effect would be triggered to fetch data, and we’d be stuck in an endless loop...",
			"author": "Eva Mueke",
			"id": "8"
		},
		{
			"title": "React Impossible States",
			"preview": "What's a React Impossible State? Read along as Sumeya decodes the principles behind the impossible.",
			"body": "Perhaps you’ve noticed a disconnect between the single states in the App component, which seem to belong together because of the useState hooks. Technically, all the states related to the asynchronous data belong together, which doesn’t only include the stories as actual data, but also their loading and error states. There is nothing wrong with multiple useState hooks in one React component. Be wary once you see multiple state updater functions in a row, however. These conditional states can lead to impossible states and undesired behavior in the UI. Try changing your pseudo data fetching function to the following to simulate the error handling.\nThe impossible state happens when an error occurs for the asynchronous data. The state for the error is set, but the state for the loading indicator isn’t revoked. In the UI, this would lead to an infinite loading indicator and an error message, though it may be better to show the error message only and hide the loading indicator. Impossible states are not easy to spot, which makes them infamous for causing bugs in the UI. Fortunately, we can improve our chances by moving states that belong together from multiple useState and useReducer hooks into a single useReducer hook. Take the following useState hooks...",
			"author": "Sumeya Hassan",
			"id": "9"
		},
		{
			"title": "Performance in React (Advanced)",
			"preview": "This article by Fatuman takes us through the advanced concepts of Peformance in React",
			"body": "With a closer look at the developer’s tools, we can see the log for the first time when the component renders using this custom hook. It doesn’t make sense to run the side-effect for the initial rendering of the component though, because there is nothing to store in the local storage except the initial value. It’s a redundant function invocation, and should only run for every update (re-rendering) of the component.\n As mentioned, there is no React Hook that runs on every re-render, and there is no way to tell the useEffect hook in a React idiomatic way to call its function only on every re-render. However, by using React’s useRef Hook which keeps its ref.current property intact over re-renders, we can keep a made up state (without re-rendering the component on state updates) with an instance variable of our component’s lifecycle.\nWe are exploiting the ref and its mutable current property for imperative state management that doesn’t trigger a re-render. Once the hook is called from its component for the first time (component render), the ref’s current property is initialized with a false boolean called isMounted...",
			"author": "Fatuma Abdulrahman",
			"id": "10"
		}
	]
}
